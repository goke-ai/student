@page "/optimization"

@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@inject HttpClient Http

@inject IStringLocalizer<App> Localize
@inject IJSRuntime JS

<h3>Optimization</h3>

@if (studentTarget?.Courses == null)
{
    <Busy />
}
else
{
    <div class="accordion" id="accordionExample">
        <div class="card">
            <div class="card-header" id="headingOne">
                <h2 class="mb-0">
                    <button class="btn btn-link btn-block text-left" type="button" data-toggle="collapse" data-target="#collapseOne" aria-expanded="true" aria-controls="collapseOne">
                        Chart
                    </button>
                </h2>
            </div>

            <div id="collapseOne" class="collapse show" aria-labelledby="headingOne" data-parent="#accordionExample">
                <div class="card-body">
                    @if (barGradeChart != null)
                    {
                        <div>
                            <PlotlyChart Chart="barGradeChart" />
                        </div>
                    }

                </div>
            </div>
        </div>
        <div class="card">
            <div class="card-header" id="headingTwo">
                <h2 class="mb-0">
                    <button class="btn btn-link btn-block text-left collapsed" type="button" data-toggle="collapse" data-target="#collapseTwo" aria-expanded="false" aria-controls="collapseTwo">
                        Table
                    </button>
                </h2>
            </div>
            <div id="collapseTwo" class="collapse" aria-labelledby="headingTwo" data-parent="#accordionExample">
                <div class="card-body">

                    <div>
                        @foreach (var c in studentTarget.Courses)
                        {
                            <div>@(c.ToString())</div>
                        }
                    </div>

                </div>
            </div>
        </div>
        <div class="card">
            <div class="card-header" id="headingThree">
                <h2 class="mb-0">
                    <button class="btn btn-link btn-block text-left collapsed" type="button" data-toggle="collapse" data-target="#collapseThree" aria-expanded="false" aria-controls="collapseThree">
                        Tools
                    </button>
                </h2>
            </div>
            <div id="collapseThree" class="collapse" aria-labelledby="headingThree" data-parent="#accordionExample">
                <div class="card-body">
                    <div class="d-flex flex-wrap">
                        @if (barGradeCharts != null)
                        {
                            @foreach (var bar in barGradeCharts)
                            {
                                <div>
                                    <PlotlyChart Chart="bar" />
                                </div>
                            }
                        }
                    </div>
                </div>
            </div>
        </div>
        @for (int i = 0; i < barSubplots?.Count; i++)
        {
            var k = i;
            var headText = $"heading_{k+2}";
            var idText = $"collapse_{k+2}";
            <div class="card">
                <div class="card-header" id="@headText">
                    <h2 class="mb-0">
                        <button class="btn btn-link btn-block text-left collapsed" type="button" data-toggle="collapse" data-target=@($"#{idText}") aria-expanded="false" aria-controls=@idText>
                            Alternative Chart @(k+2)
                        </button>
                    </h2>
                </div>
                <div id=@idText class="collapse" aria-labelledby="@headText" data-parent="#accordionExample">
                    <div class="card-body">
                        <div>
                            <PlotlyChart Chart=@barSubplots[k] />
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
}

@code {
    private StudentTarget studentTarget = new StudentTarget();

    public Goke.Plotly.Blazor.Chart barGradeChart;
    public List<Goke.Plotly.Blazor.Chart> barSubplots;
    public List<Goke.Plotly.Blazor.Chart> barGradeCharts;

    protected override async Task OnInitializedAsync()
    {

    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        var jsonString = await JS.InvokeAsync<string>("getLocalStorage", "studentTarget");

        studentTarget = System.Text.Json.JsonSerializer.Deserialize<StudentTarget>(jsonString);
        Compute();

    }

    private void Compute()
    {
        studentTarget.Courses = Simulate.CreateCourses(studentTarget);
        // studentTarget.Courses = Simulate.GradeCourses(studentTarget.Courses, Grade.Grades);
        var optimal = Simulate.OptimalGradeCourses(studentTarget.Target.Point, studentTarget.Courses, Grade.Grades);

        studentTarget.Courses = optimal.courses;
        var alternativeCourses = optimal.alternativeCourses;

        barGradeChart = subplotChart(studentTarget.Courses);
        if (alternativeCourses != null && alternativeCourses.Length > 0)
        {
            barSubplots = new List<Chart>();
            foreach (var item in alternativeCourses)
            {
                barSubplots.Add(subplotChart(item));
            }
        }


    }

    Goke.Plotly.Blazor.Chart subplotChart(List<Course> courses)
    {
        string[] colors = Color.Colors2;

        List<Trace> traces = new List<Trace>();

        var grp = courses.GroupBy(g => g.Semester);
        int count = 0;

        foreach (var g in grp)
        {
            var trace = new Trace
            {
                X = g.Select(s => s.Code).ToArray(),
                Y = g.Select(s => s.Grade.Point).ToArray(),
                Text = g.Select(s => s.Unit).ToArray(),
                Textposition = TextPosition.Auto,
                Textfont = new Font
                {
                    Color = "rgb(255,255,255)",
                },
                //Hoverinfo = HoverInfo.None,
                Type = Goke.Plotly.Blazor.Type.Bar,
                Name = $"Semester {g.Key}",
                Marker = new Marker
                {
                    Line = new Line
                    {
                        Color = "rgb(8,48,107)",
                        Width = 1.5f,
                    },
                    //Cauto = true,
                    //Autocolorscale = true,
                    //Reversescale = false,
                    Color = g.Select(s => s.Grade.Point).ToArray(),
                    Cmin = -1.0,
                    Cmax = 5.0,
                    Colorscale = new object[][]
                    {
                        new object[]{0, colors[0]},
                        new object[]{0.2, colors[1]},
                        new object[]{0.4, colors[2]},
                        new object[]{0.6, colors[3]},
                        new object[]{0.8, colors[4]},
                        new object[]{1, colors[5]},
                                            },
                    Showscale = true,
                },
                Opacity = 0.6F,
                Xaxis = $"x{count + 1}",
                Yaxis = $"y{count + 1}",
            };

            traces.Add(trace);

            count++;
        }

        var nrows = (traces.Count / 2) + (traces.Count % 2);

        var barChart = new Chart
        {
            Traces = traces,
            Layout = new Layout
            {
                Title = "Grades",
                // Xaxis = new XYAxis { Tickangle = -45 },
                Yaxis = new Axis
                {
                    Range = new object[] { -1.0, 5.0 },
                    Autorange = false,
                },
                Showlegend = false,
                Autosize = true,
                Grid = new Grid
                {
                    Rows = nrows,
                    Columns = 2,
                    Pattern = Pattern.Independent
                },

                Height = 450 * nrows,

            },
            Config = new Config { Responsive = true },
        };

        for (int i = 1; i <= traces.Count; i++)
        {
            switch (i)
            {
                case 0:
                case 1:
                    break;
                case 2:
                    barChart.Layout.Yaxis2 = new Axis
                    {
                        Anchor = $"x{i}",
                        Type = AxisType.Linear,
                        Range = new object[] { -1, 5 },
                        Autorange = false,
                    };
                    break;
                case 3:
                    barChart.Layout.Yaxis3 = new Axis
                    {
                        Anchor = $"x{i}",
                        Type = AxisType.Linear,
                        Range = new object[] { -1, 5 },
                        Autorange = false,
                    };
                    break;
                case 4:
                    barChart.Layout.Yaxis4 = new Axis
                    {
                        Anchor = $"x{i}",
                        Type = AxisType.Linear,
                        Range = new object[] { -1, 5 },
                        Autorange = false,
                    };
                    break;
                case 5:
                    barChart.Layout.Yaxis5 = new Axis
                    {
                        Anchor = $"x{i}",
                        Type = AxisType.Linear,
                        Range = new object[] { -1, 5 },
                        Autorange = false,
                    };
                    break;
                case 6:
                    barChart.Layout.Yaxis6 = new Axis
                    {
                        Anchor = $"x{i}",
                        Type = AxisType.Linear,
                        Range = new object[] { -1, 5 },
                        Autorange = false,
                    };
                    break;
                case 7:
                    barChart.Layout.Yaxis7 = new Axis
                    {
                        Anchor = $"x{i}",
                        Type = AxisType.Linear,
                        Range = new object[] { -1, 5 },
                        Autorange = false,
                    };
                    break;
                case 8:
                    barChart.Layout.Yaxis8 = new Axis
                    {
                        Anchor = $"x{i}",
                        Type = AxisType.Linear,
                        Range = new object[] { -1, 5 },
                        Autorange = false,
                    };
                    break;
                case 9:
                    barChart.Layout.Yaxis9 = new Axis
                    {
                        Anchor = $"x{i}",
                        Type = AxisType.Linear,
                        Range = new object[] { -1, 5 },
                        Autorange = false,
                    };
                    break;
                case 10:
                    barChart.Layout.Yaxis10 = new Axis
                    {
                        Anchor = $"x{i}",
                        Type = AxisType.Linear,
                        Range = new object[] { -1, 5 },
                        Autorange = false,
                    };
                    break;
                case 11:
                    barChart.Layout.Yaxis11 = new Axis
                    {
                        Anchor = $"x{i}",
                        Type = AxisType.Linear,
                        Range = new object[] { -1, 5 },
                        Autorange = false,
                    };
                    break;
                case 12:
                    barChart.Layout.Yaxis12 = new Axis
                    {
                        Anchor = $"x{i}",
                        Type = AxisType.Linear,
                        Range = new object[] { -1, 5 },
                        Autorange = false,
                    };
                    break;

                default:
                    break;
            }
        }

        return barChart;
    }

    void multipleChart()
    {
        string[] colors = Color.Colors2;

        barGradeCharts = new List<Chart>();

        var grp = studentTarget.Courses.GroupBy(g => g.Semester);
        int count = 0;

        foreach (var g in grp)
        {
            var trace = new Trace
            {
                X = g.Select(s => s.Code).ToArray(),
                Y = g.Select(s => s.Grade.Point).ToArray(),
                Text = g.Select(s => s.Unit).ToArray(),
                Textposition = TextPosition.Auto,
                Textfont = new Font
                {
                    Color = "rgb(255,255,255)",
                },
                //Hoverinfo = HoverInfo.None,
                Type = Goke.Plotly.Blazor.Type.Bar,
                Name = $"Semester {g.Key}",
                Marker = new Marker
                {
                    Line = new Line
                    {
                        Color = "rgb(8,48,107)",
                        Width = 1.5f,
                    },
                    //Cauto = true,
                    //Autocolorscale = true,
                    //Reversescale = false,
                    Color = g.Select(s => s.Grade.Point).ToArray(),
                    Cmin = -1.0,
                    Cmax = 5.0,
                    Colorscale = new object[][]
                    {
                        new object[]{0, colors[0]},
                        new object[]{0.2, colors[1]},
                        new object[]{0.4, colors[2]},
                        new object[]{0.6, colors[3]},
                        new object[]{0.8, colors[4]},
                        new object[]{1, colors[5]},
                                            },
                    Showscale = true,
                },
                Opacity = 0.6F,
                Xaxis = $"x{count + 1}",
                Yaxis = $"y{count + 1}",
            };

            //
            var barChart = new Chart
            {
                Traces = new List<Trace> { trace },
                Layout = new Layout
                {
                    Title = $"Semester {g.Key}",
                    // Xaxis = new XYAxis { Tickangle = -45 },
                    Yaxis = new Axis
                    {
                        Type = AxisType.Linear,
                        Range = new object[] { -1, 5 },
                        Autorange = false,

                    },
                    // Showlegend = true,
                    // Autosize = true,
                    Width = 450,
                },
                Config = new Config { Responsive = true },
            };

            switch (count + 1)
            {
                case 0:
                case 1:
                    break;
                case 2:
                    barChart.Layout.Yaxis2 = new Axis
                    {
                        Type = AxisType.Linear,
                        Range = new object[] { -1, 5 },
                        Autorange = false,
                    };
                    break;
                case 3:
                    barChart.Layout.Yaxis3 = new Axis
                    {
                        Type = AxisType.Linear,
                        Range = new object[] { -1, 5 },
                        Autorange = false,
                    };
                    break;
                case 4:
                    barChart.Layout.Yaxis4 = new Axis
                    {
                        Type = AxisType.Linear,
                        Range = new object[] { -1, 5 },
                        Autorange = false,
                    };
                    break;
                case 5:
                    barChart.Layout.Yaxis5 = new Axis
                    {
                        Type = AxisType.Linear,
                        Range = new object[] { -1, 5 },
                        Autorange = false,
                    };
                    break;
                case 6:
                    barChart.Layout.Yaxis6 = new Axis
                    {
                        Type = AxisType.Linear,
                        Range = new object[] { -1, 5 },
                        Autorange = false,
                    };
                    break;
                case 7:
                    barChart.Layout.Yaxis7 = new Axis
                    {
                        Type = AxisType.Linear,
                        Range = new object[] { -1, 5 },
                        Autorange = false,
                    };
                    break;
                case 8:
                    barChart.Layout.Yaxis8 = new Axis
                    {
                        Type = AxisType.Linear,
                        Range = new object[] { -1, 5 },
                        Autorange = false,
                    };
                    break;
                case 9:
                    barChart.Layout.Yaxis9 = new Axis
                    {
                        Type = AxisType.Linear,
                        Range = new object[] { -1, 5 },
                        Autorange = false,
                    };
                    break;
                case 10:
                    barChart.Layout.Yaxis10 = new Axis
                    {
                        Type = AxisType.Linear,
                        Range = new object[] { -1, 5 },
                        Autorange = false,
                    };
                    break;
                case 11:
                    barChart.Layout.Yaxis11 = new Axis
                    {
                        Type = AxisType.Linear,
                        Range = new object[] { -1, 5 },
                        Autorange = false,
                    };
                    break;
                case 12:
                    barChart.Layout.Yaxis12 = new Axis
                    {
                        Type = AxisType.Linear,
                        Range = new object[] { -1, 5 },
                        Autorange = false,
                    };
                    break;

                default:
                    break;
            }

            barGradeCharts.Add(barChart);

            count++;
        }
    }
}