@page "/"

@inject IStringLocalizer<App> Localize
@inject IJSRuntime JS

<h1>Student Target</h1>

<h2>Set Target</h2>

<EditForm Model="@studentTarget" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <p>
        <label>
            Target:
            <InputSelectX @bind-Value="studentTarget.TargetId">
                <option value="">Select target ...</option>
                @foreach (var item in Target.Targets)
                {
                    <option value=@item.Id>@item.Name</option>
                }
            </InputSelectX>
        </label>
    </p>
    <p>
        <label>
            Capability:
            <InputSelectX @bind-Value="studentTarget.CapabilityId">
                <option value="">Select grade ...</option>
                @foreach (var item in Grade.Grades)
                {
                    <option value=@item.Id>@item.Name</option>
                }
            </InputSelectX>
        </label>
    </p>
    <p>
        <label>
            Semesters:
            <InputSelectX @bind-Value="studentTarget.SemesterId">
                <option value="">Select semester ...</option>
                @foreach (var item in Semester.Semesters)
                {
                    <option value=@item.Id>@item.Name</option>
                }
            </InputSelectX>
        </label>
    </p>
    <p>
        <label>
            Average Course(s) Per Semester:
            <InputNumber @bind-Value="studentTarget.AverageCoursePerSemester" />
        </label>
    </p>
    <p>
        <label>
            Maximum Course Unit:
            <InputNumber @bind-Value="studentTarget.MaximumCourseUnit" />
        </label>
    </p>

    <button type="submit">Submit</button>

</EditForm>

<hr />
@if (studentTarget?.Courses != null)
{
    <div class="accordion" id="accordionExample">
        <div class="card">
            <div class="card-header" id="headingOne">
                <h2 class="mb-0">
                    <button class="btn btn-link btn-block text-left" type="button" data-toggle="collapse" data-target="#collapseOne" aria-expanded="true" aria-controls="collapseOne">
                        Chart
                    </button>
                </h2>
            </div>

            <div id="collapseOne" class="collapse show" aria-labelledby="headingOne" data-parent="#accordionExample">
                <div class="card-body">
                    @if (barGradeChart != null)
                    {
                        <div>
                            <PlotlyChart Chart="barGradeChart" />
                        </div>
                    }

                </div>
            </div>
        </div>
        <div class="card">
            <div class="card-header" id="headingTwo">
                <h2 class="mb-0">
                    <button class="btn btn-link btn-block text-left collapsed" type="button" data-toggle="collapse" data-target="#collapseTwo" aria-expanded="false" aria-controls="collapseTwo">
                        Table
                    </button>
                </h2>
            </div>
            <div id="collapseTwo" class="collapse" aria-labelledby="headingTwo" data-parent="#accordionExample">
                <div class="card-body">


                    <div>
                        @foreach (var c in studentTarget.Courses)
                        {
                            <div>@(c.ToString())</div>
                        }
                    </div>

                </div>
            </div>
        </div>
        <div class="card">
            <div class="card-header" id="headingThree">
                <h2 class="mb-0">
                    <button class="btn btn-link btn-block text-left collapsed" type="button" data-toggle="collapse" data-target="#collapseThree" aria-expanded="false" aria-controls="collapseThree">
                        Collapsible Group Item #3
                    </button>
                </h2>
            </div>
            <div id="collapseThree" class="collapse" aria-labelledby="headingThree" data-parent="#accordionExample">
                <div class="card-body">
                </div>
            </div>
        </div>
    </div>
}


    @code {
private StudentTarget studentTarget = new StudentTarget();

    public Goke.Plotly.Blazor.Chart barGradeChart;

    private void HandleValidSubmit()
    {
        studentTarget.Courses = Simulate.CreateCourses(studentTarget);
        studentTarget.Courses = Simulate.GradeCourses(studentTarget.Courses, Grade.Grades);



        List<Trace> traces = new List<Trace>
        {

        };

        var grp = studentTarget.Courses.GroupBy(g => g.Semester);
        int count = 0;
        foreach (var g in grp)
        {
            var trace = new Trace
            {
                X = g.Select(s => s.Code).ToArray(),
                Y = g.Select(s => s.Grade.Point).ToArray(),
                Text = g.Select(s => s.Unit).ToArray(),
                Textposition = TextPosition.Auto,
                //Hoverinfo = HoverInfo.None,
                Type = Goke.Plotly.Blazor.Type.Bar,
                Name = $"Semester {g.Key}",
                //Marker = new Marker
                //{
                //    Color = new string[]{ "rgb(255,0,0)", "rgb(0,255,0)", "rgb(0,0,255)", "rgb(255,0,255)", "rgb(255,255,0)", "rgb(0,255,255)" },
                //    Opacity = 0.7F,
                //},
                Xaxis = $"x{count + 1}",
                Yaxis = $"y{count + 1}",
            };

            traces.Add(trace);
            count++;
        }

        var nrows = (traces.Count / 2) + (traces.Count % 2);
        Console.WriteLine($"nrows: {nrows}");

        barGradeChart = new Chart
        {
            Traces = traces,
            Layout = new Layout
            {
                Title = "Grades",
                // Xaxis = new XYAxis { Tickangle = -45 },
                // Showlegend = true,
                Autosize = true,
                Grid = new Grid
                {
                    Rows = nrows,
                    Columns = 2,
                    Pattern = Pattern.Independent
                },
                Height = 450 * nrows,

            },
            Config = new Config { Responsive = true },
        };


    }
    }